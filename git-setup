#!/bin/bash
#
# Setup a repository with remote tracking defaults for GitHub.
# Supports central repo and upstream/fork repo setups.
#
# If using a central repo, the remote is assumed to be "origin".
# If using upstream and fork repos, configure the names with:
#     git config hub.remote.upstream UPSTREAM_REPO_NAME
#     git config hub.remote.fork FORK_REPO_NAME
# If you always use the same names, consider setting these with --global.
# Examples:
# - The https://help.github.com/articles/configuring-a-remote-for-a-fork/
#   article recommends that the upstream name should be "upstream" and the
#   fork name should be "origin".
# - The https://hub.github.com/ tool automatically configures the upstream
#   name to be "origin" and the fork name to be your github user name.

set -e  # stop on error


CONFIG_PUSH_DEFAULT=$(git config --get push.default)
CONFIG_BRANCH_MASTER_REMOTE=$(git config --get branch.master.remote)
CONFIG_REMOTE_PUSHDEFAULT=$(git config --get remote.pushdefault)
CONFIG_HUB_USER=$(git hub-user)
CONFIG_HUB_REPO_TYPE=$(git config --get hub.repo.type)
CONFIG_HUB_REMOTE_UPSTREAM=$(git config --get hub.remote.upstream)
CONFIG_HUB_REMOTE_FORK=$(git config --get hub.remote.fork)
HAS_HUB_COMMAND=$(which hub > /dev/null && echo yes || echo no)
AGAIN_MODE="no"


function ask() {
  question="$1"
  default="$2"
  options="$3"
  prompt=": "
  if [[ -n "$default" ]]; then
    prompt="[$default]$prompt"
  fi
  if [[ -n "$options" ]]; then
    prompt="($options)$prompt"
  fi
  while true; do
    echo "$question" > /dev/tty
    read -p "$prompt" reply < /dev/tty
    if [[ -n "$default" ]] && [[ -z "$reply" ]]; then
      reply="$default"
    fi
    if [[ -n "$reply" ]]; then
      echo "$reply"
      return
    fi
  done
}


function confirm() {
  question="$1"
  default="$2"
  options="yes/no"
  while true; do
    reply=$(ask "$question" "$default" "$options")
    case "$reply" in
      [Yy]*)
        return 0 ;;
      [Nn]*)
        return 1 ;;
    esac
  done
}


function check_repo_type() {
  echo
  echo "Checking repo type..."
  echo "    type: ${CONFIG_HUB_REPO_TYPE:-(unset)}"
  if [[ -z "$CONFIG_HUB_REPO_TYPE" ]] || [[ $AGAIN_MODE = "yes" ]]; then
    if confirm "Are you setting up a fork of another repo?"; then
      CONFIG_HUB_REPO_TYPE="fork"
    else
      CONFIG_HUB_REPO_TYPE="source"
    fi
    echo "> git config hub.repo.type $CONFIG_HUB_REPO_TYPE"
    git config hub.repo.type $CONFIG_HUB_REPO_TYPE
  fi
}


function check_github_config() {
  echo
  echo "Checking github config..."
  echo "    user name:     ${CONFIG_HUB_USER:-(unset)}"
  if [[ $CONFIG_HUB_REPO_TYPE = "fork" ]]; then
    echo "    upstream name: ${CONFIG_HUB_REMOTE_UPSTREAM:-(unset)}"
    echo "    fork name:     ${CONFIG_HUB_REMOTE_FORK:-(unset)}"
  fi
  if [[ -z "$CONFIG_HUB_USER" ]]; then
    echo "Warning: No github user name found; this script will be less helpful."
    echo "To set the github user name globally, run the following:"
    echo "    git config --global hub.user YOUR_GITHUB_USER_NAME"
  fi
  if [[ $CONFIG_HUB_REPO_TYPE = "fork" ]]; then
    if [[ -z "$CONFIG_HUB_REMOTE_UPSTREAM" ]] || [[ -z "$CONFIG_HUB_REMOTE_FORK" ]] || [[ $AGAIN_MODE = "yes" ]]; then
      echo "Warning: One or both of upstream name and fork name are unset."
      if [[ -n "$CONFIG_HUB_USER" ]] && [[ $HAS_HUB_COMMAND = "yes" ]] && confirm "Do you want to use the \"hub\" config (upstream=\"origin\" and fork=\"$CONFIG_HUB_USER\")?" "yes"; then
        CONFIG_HUB_REMOTE_UPSTREAM="origin"
        CONFIG_HUB_REMOTE_FORK="$CONFIG_HUB_USER"
      elif confirm "Do you want to use the standard config (upstream=\"upstream\" and fork=\"origin\")?" "yes"; then
        CONFIG_HUB_REMOTE_UPSTREAM="upstream"
        CONFIG_HUB_REMOTE_FORK="origin"
      fi
      if [[ -n "$CONFIG_HUB_REMOTE_UPSTREAM" ]] && [[ -n "$CONFIG_HUB_REMOTE_FORK" ]]; then
        echo "> git config hub.remote.upstream $CONFIG_HUB_REMOTE_UPSTREAM"
        git config hub.remote.upstream $CONFIG_HUB_REMOTE_UPSTREAM
        echo "> git config hub.remote.fork $CONFIG_HUB_REMOTE_FORK"
        git config hub.remote.fork $CONFIG_HUB_REMOTE_FORK
        echo "Done."
        echo "To set the upstream name and fork name globally, run the following:"
        echo "    git config --global hub.remote.upstream $CONFIG_HUB_REMOTE_UPSTREAM"
        echo "    git config --global hub.remote.fork $CONFIG_HUB_REMOTE_FORK"
      fi
    fi
  fi
}



function check_push_mode() {
  suggested="${1:-current}"
  echo
  echo "Checking push mode config..."
  echo "    current:   ${CONFIG_PUSH_DEFAULT:-(unset)}"
  echo "    suggested: $suggested"
  if [[ "$CONFIG_PUSH_DEFAULT" != "$suggested" ]] || [[ $AGAIN_MODE = "yes" ]]; then
    if confirm "Do you want to change the push mode config to \"$suggested\"?" "yes"; then
      CONFIG_PUSH_DEFAULT="$suggested"
      echo "> git config push.default $CONFIG_PUSH_DEFAULT"
      git config push.default $CONFIG_PUSH_DEFAULT
      echo "Done."
      echo "If you want to set the push mode config globally, run the following:"
      echo "    git config --global push.default $CONFIG_PUSH_DEFAULT"
    fi
  else
    echo "No change needed."
  fi
}


function check_default_push_remote() {
  suggested="$1"
  echo
  echo "Checking default push remote..."
  echo "    current:   ${CONFIG_REMOTE_PUSHDEFAULT:-(unset)}"
  echo "    suggested: ${suggested:-(unset)}"
  if [[ "$CONFIG_REMOTE_PUSHDEFAULT" != "$suggested" ]] || [[ $AGAIN_MODE = "yes" ]]; then
    if [[ -z "$suggested" ]]; then
      if confirm "Do you want to unset the default push remote?" "yes"; then
        CONFIG_REMOTE_PUSHDEFAULT=
        echo "> git config --unset remote.pushdefault"
        git config --unset remote.pushdefault
        echo "Done."
      fi
    else
      if confirm "Do you want to change the default push remote to \"$suggested\"?" "yes"; then
        CONFIG_REMOTE_PUSHDEFAULT="$suggested"
        echo "> git config remote.pushdefault $CONFIG_REMOTE_PUSHDEFAULT"
        git config remote.pushdefault $CONFIG_REMOTE_PUSHDEFAULT
        echo "Done."
      fi
    fi
  else
    echo "No change needed."
  fi
}


function check_upstream_and_fork_remotes() {
  echo
  echo "Checking upstream and fork remotes..."

  if [[ -z "$CONFIG_HUB_REMOTE_UPSTREAM" ]] || [[ -z "$CONFIG_HUB_REMOTE_FORK" ]]; then
    echo
    echo "Error: Please configure both an upstream and fork remote name."
    exit 1
  fi

  upstream="$CONFIG_HUB_REMOTE_UPSTREAM"
  upstream_url=
  if [[ -n "$upstream" ]]; then
    upstream_url=$(git config --get remote.$upstream.url)
  fi
  fork="$CONFIG_HUB_REMOTE_FORK"
  fork_url=
  if [[ -n "$fork" ]]; then
    fork_url=$(git config --get remote.$fork.url)
  fi
  echo "    upstream remote: $upstream $upstream_url"
  echo "    fork remote:     $fork $fork_url"

  if [[ -n "$upstream_url" ]] && [[ "$upstream_url" = *$CONFIG_HUB_USER/* ]]; then
      echo "Warning: The upstream remote \"$upstream\" looks like it is pointed to your fork."
      if [[ $HAS_HUB_COMMAND = "yes" ]]; then
        if confirm "Do you want to change the upstream remote?" "yes"; then
          repo=$(ask "Please enter the upstream remote for \"$upstream\":" "" "github user")
          echo "> hub remote set-url $upstream $repo"
          hub remote set-url $upstream $repo || exit 1
          echo "Done."
        fi
      fi
  elif [[ -z "$upstream_url" ]]; then
    echo "Warning: No upstream remote found for \"$upstream\"."
    if [[ $HAS_HUB_COMMAND = "yes" ]]; then
      if confirm "Do you want to add an upstream remote?" "yes"; then
        repo=$(ask "Please enter the upstream remote for \"$upstream\":" "" "github user")
        echo "> hub remote add $upstream $repo"
        hub remote add $upstream $repo || exit 1
        echo "Done."
      fi
    else
      echo
      echo "Error: Please add an upstream remote for \"$upstream\""
      echo "    Example:  git remote add $upstream UPSTREAM_GIT_URL"
      exit 1
    fi
  else
    echo "No change needed for upstream remote \"$upstream\"."
  fi

  if [[ -n "$fork_url" ]] && [[ "$fork_url" != *$CONFIG_HUB_USER/* ]]; then
      echo "Warning: The fork remote \"$fork\" looks like it is pointed to your fork."
      if [[ $HAS_HUB_COMMAND = "yes" ]]; then
        if confirm "Do you want to change the fork remote?" "yes"; then
          repo=$(ask "Please enter the fork remote for \"$fork\":" "$CONFIG_HUB_USER" "github user")
          echo "> hub remote set-url $fork $repo"
          hub remote set-url $fork $repo || exit 1
          echo "Done."
        fi
      fi
  elif [[ -z "$fork_url" ]]; then
    echo "Warning: No fork remote found for \"$fork\"."
    if [[ $HAS_HUB_COMMAND = "yes" ]]; then
      if confirm "Do you want to add a fork remote?" "yes"; then
        repo=$(ask "Please enter the fork remote for \"$fork\":" "$CONFIG_HUB_USER" "github user")
        echo "> hub remote add $fork $repo"
        hub remote add $fork $repo || exit 1
        echo "Done."
      fi
    else
      echo
      echo "Error: Please add a fork remote for \"$fork\""
      echo "    Example:  git remote add $fork UPSTREAM_GIT_URL"
      exit 1
    fi
  else
    echo "No change needed for fork remote \"$fork\"."
  fi
}


function check_central_remote() {
  echo
  echo "Checking default remote..."
  remote=$CONFIG_BRANCH_MASTER_REMOTE
  remote_url=
  if [[ -n "$remote" ]]; then
    remote_url=$(git config --get remote.$remote.url)
  fi
  origin_url=$(git config --get remote.origin.url)
  if [[ -n "$remote_url" ]]; then
    echo "    remote: $remote $remote_url"
    echo "No change needed."
  elif [[ -z "$remote_url" ]] && [[ -n "$origin_url" ]]; then
    echo "    remote: ${remote:-(unset)} $remote_url"
    echo "    found:  origin $origin_url"
    if confirm "Do you want to track the \"origin\" remote?" "yes"; then
      echo "> git fetch origin"
      git fetch origin
      echo "> git branch -u origin/master master"
      git branch -u origin/master master
      echo "Done."
    fi
  else
    echo "Warning: No remote found."
    if [[ $HAS_HUB_COMMAND = "yes" ]]; then
      if confirm "Do you want to add a remote?" "yes"; then
        repo=$(ask "Please enter the remote for \"origin\":" "$CONFIG_HUB_USER" "github user")
        echo "> hub remote add origin $repo"
        hub remote add origin $repo || exit 1
        echo "Done."
      fi
    fi
  fi
}


function summarize() {
  echo
  echo "Setup summary:"
  echo "    repo type: ${CONFIG_HUB_REPO_TYPE:-(unset)}"
  echo "    push mode: ${CONFIG_PUSH_DEFAULT:-(unset)}"
  echo "    default push remote: ${CONFIG_REMOTE_PUSHDEFAULT:-(unset)}"
  if [[ $CONFIG_HUB_REPO_TYPE = "fork" ]]; then
    upstream="$CONFIG_HUB_REMOTE_UPSTREAM"
    upstream_url=
    if [[ -n "$upstream" ]]; then
      upstream_url=$(git config --get remote.$upstream.url)
    fi
    fork="$CONFIG_HUB_REMOTE_FORK"
    fork_url=
    if [[ -n "$fork" ]]; then
      fork_url=$(git config --get remote.$fork.url)
    fi
    echo "    upstream remote: $upstream $upstream_url"
    echo "    fork remote: $fork $fork_url"
  else
    remote="$CONFIG_BRANCH_MASTER_REMOTE"
    remote_url=
    if [[ -n "$remote" ]]; then
      remote_url=$(git config --get remote.$remote.url)
    fi
    echo "    remote: $remote $remote_url"
  fi
}


function main() {
  if [[ $1 = "--again" ]]; then
    AGAIN_MODE="yes"
  fi

  check_repo_type

  check_github_config

  if [[ $CONFIG_HUB_REPO_TYPE = "fork" ]]; then
    check_upstream_and_fork_remotes
  else
    check_central_remote
  fi

  check_push_mode

  if [[ $CONFIG_HUB_REPO_TYPE = "fork" ]]; then
    check_default_push_remote "$CONFIG_HUB_REMOTE_FORK"
  else
    check_default_push_remote "origin"
  fi

  summarize
}


main "$@"
